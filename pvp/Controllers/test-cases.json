{
  "testCases": [
    {
      "exercise": "Boom!",
      "input": "1 2 3 4 5 6 7",
      "expectedOutput": "Boom!"
    },
    {
      "exercise": "Boom!",
      "input": "8 6 33 100",
      "expectedOutput": "there is no 7 in the array"
    },
    {
      "exercise": "Boom!",
      "input": "2 55 60 97 86",
      "expectedOutput": "Boom!"
    },
    {
      "exercise": "BeautifulNumbers",
      "input": "10 2",
      "expectedOutput": "True"
    },
    {
      "exercise": "BeautifulNumbers",
      "input": "20 4",
      "expectedOutput": "False"
    },
    {
      "exercise": "BeautifulNumbers",
      "input": "50 6",
      "expectedOutput": "False"
    },
    {
      "exercise": "Binary",
      "input": "15",
      "expectedOutput": "0"
    },
    {
      "exercise": "Binary",
      "input": "10",
      "expectedOutput": "1"
    },
    {
      "exercise": "Binary",
      "input": "27",
      "expectedOutput": "2"
    },
    {
      "exercise": "Jumps",
      "input": "2 3 1 1 4",
      "expectedOutput": "2"
    },
    {
      "exercise": "Jumps",
      "input": "1 2 1 0 3",
      "expectedOutput": "-1"
    },
    {
      "exercise": "Jumps",
      "input": "1 1 1 1 1",
      "expectedOutput": "4"
    },
    {
      "exercise": "NumberInRange",
      "input": "5 15 2",
      "expectedOutput": "1"
    },
    {
      "exercise": "NumberInRange",
      "input": "1 5 3",
      "expectedOutput": "3"
    },
    {
      "exercise": "NumberInRange",
      "input": "10 15 3",
      "expectedOutput": "11"
    },
    {
      "exercise": "NumberInRange",
      "input": "70 80 6",
      "expectedOutput": "-1"
    },
    {
      "exercise": "Boomerang",
      "input": "3 7 3 2 1 5 1 2 2 -2 2",
      "expectedOutput": "3"
    },
    {
      "exercise": "Boomerang",
      "input": "1 7 1 7 1 7 1",
      "expectedOutput": "5"
    },
    {
      "exercise": "Boomerang",
      "input": "9 9 9 9 9",
      "expectedOutput": "0"
    },
    {
      "exercise": "BrickDimensions",
      "input": "1 1 1 1 1",
      "expectedOutput": "true"
    },
    {
      "exercise": "BrickDimensions",
      "input": "1 1 1 0 0",
      "expectedOutput": "false"
    },
    {
      "exercise": "BrickDimensions",
      "input": "1 1 1 2 2",
      "expectedOutput": "true"
    },
    {
      "exercise": "Building",
      "input": "9",
      "expectedOutput": "2"
    },
    {
      "exercise": "Building",
      "input": "100",
      "expectedOutput": "4"
    },
    {
      "exercise": "Building",
      "input": "4183059834009",
      "expectedOutput": "2022"
    },
    {
      "exercise": "Holmes",
      "input": "aaaaabc",
      "expectedOutput": "NO"
    },
    {
      "exercise": "Holmes",
      "input": "abcc",
      "expectedOutput": "YES"
    },
    {
      "exercise": "Holmes",
      "input": "aabbcd",
      "expectedOutput": "NO"
    },
    {
      "exercise": "MultiplyStrings",
      "input": "123 456",
      "expectedOutput": "56088"
    },
    {
      "exercise": "MultiplyStrings",
      "input": "99999999 0",
      "expectedOutput": "0"
    },
    {
      "exercise": "MultiplyStrings",
      "input": "2 3",
      "expectedOutput": "6"
    },
    {
      "exercise": "Names",
      "input": "W. Shakespeare Jr.",
      "expectedOutput": "false"
    },
    {
      "exercise": "Names",
      "input": "W. Shakespeare",
      "expectedOutput": "true"
    },
    {
      "exercise": "Names",
      "input": "H. G. Wells Jr.",
      "expectedOutput": "false"
    },
    {
      "exercise": "Names",
      "input": "H. G. W.",
      "expectedOutput": "false"
    },
    {
      "exercise": "Names",
      "input": "H.G.",
      "expectedOutput": "false"
    },
    {
      "exercise": "Names",
      "input": "J.R.R. Tolkien",
      "expectedOutput": "true"
    },
    {
      "exercise": "OddishOrEvenish",
      "input": "12",
      "expectedOutput": "Oddish"
    },
    {
      "exercise": "OddishOrEvenish",
      "input": "123456789",
      "expectedOutput": "Oddish"
    },
    {
      "exercise": "OddishOrEvenish",
      "input": "2468",
      "expectedOutput": "Evenish"
    },
    {
      "exercise": "OddishOrEvenish",
      "input": "42",
      "expectedOutput": "Evenish"
    },
    {
      "exercise": "Palindrome",
      "input": "Repaper",
      "expectedOutput": "YES"
    },
    {
      "exercise": "Palindrome",
      "input": "Rotavator",
      "expectedOutput": "YES"
    },
    {
      "exercise": "Palindrome",
      "input": "University",
      "expectedOutput": "NO"
    },
    {
      "exercise": "Palindrome",
      "input": "S",
      "expectedOutput": "YES"
    },
    {
      "exercise": "Regex",
      "input": "abc ..*",
      "expectedOutput": "true"
    },
    {
      "exercise": "Regex",
      "input": "a ab*",
      "expectedOutput": "true"
    },
    {
      "exercise": "Regex",
      "input": "aaa ab*a",
      "expectedOutput": "false"
    },
    {
      "exercise": "LinkedListMerge",
      "input": "[[1,4,5],[1,3,4],[2,6]]",
      "expectedOutput": "[1, 1, 2, 3, 4, 4, 5, 6]"
    },
    {
      "exercise": "LinkedListMerge",
      "input": "[[-2,-1,0], [2,3,4], [1,5,6]]",
      "expectedOutput": "[-2, -1, 0, 1, 2, 3, 4, 5, 6]"
    },
    {
      "exercise": "LinkedListMerge",
      "input": "[[]]",
      "expectedOutput": "[]"
    },
    {
      "exercise": "LinkedListNode",
      "input": "1 2 3 4 5,2",
      "expectedOutput": "[2, 1, 4, 3, 5]"
    },
    {
      "exercise": "LinkedListNode",
      "input": "1 2 3 4 5 6,4",
      "expectedOutput": "[4, 3, 2, 1, 5, 6]"
    },
    {
      "exercise": "LinkedListNode",
      "input": "1,1",
      "expectedOutput": "[1]"
    },
    {
      "exercise": "NonNestedItems",
      "input": "[1, [2, [3, [4, 5]], 6]]",
      "expectedOutput": "6"
    },
    {
      "exercise": "NonNestedItems",
      "input": "[[1, 2], [3, [4, [5], 6], 7], [8, [9]]]",
      "expectedOutput": "9"
    },
    {
      "exercise": "NonNestedItems",
      "input": "[1, 2, 3, 4, 5]",
      "expectedOutput": "5"
    },
    {
      "exercise": "DaysBetweenDates",
      "input": "2022-01-01 2022-03-01",
      "expectedOutput": "59"
    },
    {
      "exercise": "DaysBetweenDates",
      "input": "2022-01-01 2021-12-31",
      "expectedOutput": "9"
    },
    {
      "exercise": "DaysBetweenDates",
      "input": "2022-12-31 2022-01-01",
      "expectedOutput": "-364"
    },
    {
      "exercise": "CaeserCipher",
      "input": "xyz,3",
      "expectedOutput": "abc"
    },
    {
      "exercise": "CaeserCipher",
      "input": "hello world,5",
      "expectedOutput": "mjqqt btwqi"
    },
    {
      "exercise": "CaeserCipher",
      "input": "The quick brown fox jumps over the lazy dog,10",
      "expectedOutput": "Dro aesmu lbygx pyh tewzc yfob dro vkji nyq"
    },
    {
      "exercise": "CaeserCipher",
      "input": "1234,2",
      "expectedOutput": "3456"
    },
    {
      "exercise": "SmallestWindow",
      "input": "mississippi iss",
      "expectedOutput": "issi"
    },
    {
      "exercise": "SmallestWindow",
      "input": "abcdefghij acd",
      "expectedOutput": "acdefg"
    },
    {
      "exercise": "SmallestWindow",
      "input": "xyxy yy",
      "expectedOutput": "-1"
    },
    {
      "exercise": "TrapWater",
      "input": "3 0 0 2 0 4",
      "expectedOutput": "10"
    },
    {
      "exercise": "TrapWater",
      "input": "0 1 0 2 1 0 1 3 2 1 2 1",
      "expectedOutput": "6"
    },
    {
      "exercise": "TrapWater",
      "input": "3 1 2 4 0 1",
      "expectedOutput": "7"
    },
    {
      "exercise": "SumCombinations",
      "input": "1 2 3,4",
      "expectedOutput": "4"
    },
    {
      "exercise": "SumCombinations",
      "input": "2 5 10,15",
      "expectedOutput": "6"
    },
    {
      "exercise": "SumCombinations",
      "input": "2 3 6,10",
      "expectedOutput": "7"
    },
    {
      "exercise": "SubarraySum",
      "input": "1 2 3 4 5,9",
      "expectedOutput": "2 4"
    },
    {
      "exercise": "SubarraySum",
      "input": "10 5 2 7 1 9,15",
      "expectedOutput": "1 4"
    },
    {
      "exercise": "SubarraySum",
      "input": "1 2 3 4 5,15",
      "expectedOutput": "-1"
    },
    {
      "exercise": "NthTermSequence",
      "input": "1 2 3 4 5",
      "expectedOutput": "[1, 4, 9, 16, 25]"
    },
    {
      "exercise": "NthTermSequence",
      "input": "3 7 11 15",
      "expectedOutput": "[23, 31, 39, 47]"
    },
    {
      "exercise": "NthTermSequence",
      "input": "0 2 6 12",
      "expectedOutput": "[20, 30, 42, 56]"
    },
    {
      "exercise": "Zoo",
      "input": "ZZZoooo",
      "expectedOutput": "Yes"
    },
    {
      "exercise": "Zoo",
      "input": "ZZZZooooo",
      "expectedOutput": "No"
    },
    {
      "exercise": "Zoo",
      "input": "ZZZoooooo",
      "expectedOutput": "Yes"
    },
    {
      "exercise": "Jumps",
      "input": "2 3 1 1 4",
      "expectedOutput": "2"
    },
    {
      "exercise": "Jumps",
      "input": "1 1 1 0 1",
      "expectedOutput": "-1"
    },
    {
      "exercise": "Jumps",
      "input": "1 2 3 4 5",
      "expectedOutput": "3"
    }
  ]
}